<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<title>zzt.archive - ZZT Manual - Reference manual</title>
    <link rel="stylesheet" type="text/css" href="zzt_archivos/style.css">
</head>
<body>
<p class="nav"><a href="https://apocalyptech.com/games/zzt/manual/index.html">ZZT Manual</a> » <a href="https://apocalyptech.com/games/zzt/manual/lang.html">ZZT-OOP Programming Language</a> » <a href="https://apocalyptech.com/games/zzt/manual/langtut.html">Tutorial</a> | Reference manual</p>

<h1>ZZT-OOP Programming Language</h1>
<h2>Reference Manual</h2>

Contents:<br>
<a href="#fmts">Program format</a><br>
<a href="#cmds">Commands</a><br>
<a href="#msgs">Messages</a><br>
<a href="#dirs">Directions</a><br>
<a href="#flags">Flags</a>

<a name="fmts"></a><h3>Program Format</h3>
     Besides direct commands,
ZZT-OOP programs contain other
statements that serve varying
purposes.
     Each type of statement
has an associated symbol:<br>

<pre> $  @  #  /  ?  :  '  !  !-</pre>

<b>Their meanings:</b><br>

<dl>
    <dt>@objectname</dt>
    <dd>
When this is on the first line
of an object, it identifies
the object by name.  If an object is not given a name,
there is no way to direct messages to it except when using
<tt>ALL</tt> and <tt>OTHERS</tt>.
</dd>

<dt>#command</dt>
<dd>
Identifies a programming
language command.
</dd>

<dt>/direction</dt>
<dd>
Causes the object to move one
space in the given direction.
If it is blocked, it will wait
until it is free.
</dd>

<dt>?direction</dt>
<dd>
Tells an object to try to move
in a given direction.  If its
movement is blocked, the command will be ignored.
</dd>

<dt>:label</dt>
<dd>
Identifies the part of the
program that handles a
specified message.  Whenever
the program receives the message, it will execute statements following the label.
In <tt>ZZT.DAT</tt> text format, labels
can also be followed by a <tt>;</tt>,
like so:
<pre>:label;Text</pre>
The text appears white, and
hyperlinks move right to the
line of text, retaining any text
before it.  Unfortunately, this
command does not work in ZZT-OOP.
However, most <tt>.HLP</tt> files
implement it.
</dd>

<dt>'comment</dt>
<dd>
Comments have no effect, but
serve to remind you (the
programmer) what you were doing when you wrote the program.  They also serve as
"pre-zapped" labels which
can be <tt>#restore</tt>d.
</dd>

<dt>text</dt>
<dd>
When program execution comes
to a line of text, the text
will be displayed on the
screen.  If only a one-line message is given, it will
be flashed on the bottom of
the screen as a message.  For
multiple lines, a "scroll"
will be opened up on screen
and the text will appear.
The contents of any window
can be printed using <tt>Alt-P</tt>.
</dd>

<dt>$text</dt>
<dd>
This makes text white and
centers it.  It can be used
for titles, dialogue, or
just about anything!
Note: this command does
not work in a one-line message.
It simply shows the $.
</dd>

<dt><a name"text"=""></a>!msg;text</dt>
<dd>
A hypertext-like button.  When
this statement is included
among text descriptions, it
appears to the player as a
button...
<p class="link">» Just like this.</p>
Then, as the user views the
text, he may position the cursor on the button and press
enter, causing the supplied
message to be sent.
</dd>

<dt>!-filename;text</dt>
<dd>
This creates a hyperlink,
just like !, but this one
opens up a ZZT window
and displays the contents of
the given file, as well as
displaying instructions above. 
If no extension is specified, HLP
is used.
</dd>
</dl>

<a name="msgs"></a><h3>Messages</h3>

     An object can send and
receive (exchange) messages
with itself, other objects,
and the game itself.<p>

    Messages caused by the
game itself:

</p><dl>
<dt>TOUCH</dt><dd>When player touches Program</dd>
<dt>SHOT</dt><dd>Program is hit by bullet</dd>
<dt>BOMBED</dt><dd>Bomb explodes near program</dd>
<dt>THUD</dt><dd>Program <tt>WALK</tt>s into wall</dd>
<dt>ENERGIZE</dt><dd>Player touches an <tt>ENERGIZER</tt></dd>
</dl>

<a name="dirs"></a><h3>Directions:</h3>

<dl>
<dt>N, NORTH<br>
S, SOUTH<br>
E, EAST<br>
W, WEST</dt>
<dd>
Compass directions
</dd>

<dt>I, IDLE</dt>
<dd>
No direction, stationary.
</dd>

<dt>SEEK</dt>
<dd>
    The direction toward the
    player, or
    the direction away from
    the player, if you are
    energized.
</dd>

<dt>FLOW</dt>
<dd>
    The direction in which
    the object is currently
    walking.
</dd>

<dt>RNDNS</dt>
<dd>
    Either North or South,
    at random.
</dd>

<dt>RNDNE</dt>
<dd>
    Either North or East,
    at random.
</dd>

<dt>CW &lt;direction&gt;</dt>
<dd>
    Clockwise from the given
    direction,
    i.e. <tt>CW NORTH</tt> = <tt>EAST</tt>
</dd>

<dt>CCW &lt;direction&gt;</dt>
<dd>
    Counter-clockwise from
    the given direction.
    <tt>CW NORTH</tt> = <tt>WEST</tt>
</dd>

<dt>RNDP &lt;direction&gt;</dt>
<dd>
    A random direction perpendicular to the given
    direction.  For example,
    <tt>RNDP NORTH</tt> = either <tt>EAST</tt>
    or <tt>WEST</tt>
</dd>

<dt>OPP &lt;direction&gt;</dt>
<dd>
    Opposite the given
    direction.
    i.e., <tt>OPP NORTH</tt> = <tt>SOUTH</tt><p>

     Here are some example
commands to demonstrate the
use of directions:<br>
</p><blockquote>
#GO CW RNDNS  'Go either east or west.<br>
#GO OPP SEEK  'Go away from the player.<br>
#WALK CW FLOW 'Turn clockwise from the direction we're walking in.
</blockquote>
</dd>

</dl>

<a name="flags"></a><h3>Flag manipulation:</h3>

     Objects can manipulate
simple variables called flags.
A flag assumes one of two possible states: <tt>SET</tt> and <tt>CLEAR</tt>.
Objects can alter flags, then
take action accordingly.<p>

     Flags are not associated
with individual objects or
boards.  A flag set by one
object can be accessed by all
other objects on all boards.</p><p>

     Three commands are useful here:<br>

</p><dl>

<dt><a name="set"></a>#SET &lt;flag variable&gt;<br>
<a name="clear"></a>#CLEAR &lt;flag variable&gt;</dt>
<dd>
     Set and clear flag
     variables.
</dd>

<dt><a name="if"></a>#IF [NOT] &lt;flag&gt; [THEN] &lt;msg&gt;</dt>
<dd>
     Tests the condition of a
     flag.  If the flag is <tt>SET</tt>, the
message is sent. Otherwise, the
instruction is ignored.<p>
If <tt>NOT</tt> is included, the
message is sent if the flag is
<tt>NOT SET</tt>. Otherwise, the instruction is ignored.</p><p>
     In addition to userdeclared flags, several "internal" flags can be accessed
by any object:

</p><dl>

<dt>ALLIGNED</dt>
<dd>
This flag is <tt>SET</tt> whenever
the object is aligned with
the player either horizontally
or vertically.
</dd>

<dt>CONTACT</dt>
<dd>
This flag is <tt>SET</tt> whenever
the object is adjacent to
(touching) the player.
</dd>

<dt>BLOCKED &lt;direction&gt;</dt>
<dd>
This flag is <tt>SET</tt> when the
object is not free to move in
the given direction, and <tt>CLEAR</tt>
when the object is free to
move in the direction.
</dd>

<dt>ENERGIZED</dt>
<dd>
This flag is <tt>SET</tt> whenever
the player has touched an
energizer and can not be
harmed by creatures and bullets.
</dd>

<dt>ANY &lt;color&gt; &lt;item&gt;</dt>
<dd>
This flag is <tt>SET</tt> if there
are objects of the given type
on the screen.
</dd>

</dl>

</dd></dl>

<a name="cmds"></a><h3>Programming commands:</h3>

     All ZZT-OOP commands are
preceeded by the pound
sign (#).  The following commands are supported:

<ul>
<li><a href="#become">#BECOME &lt;kind&gt;</a></li>
<li><a href="#bind">#BIND &lt;objectname&gt;</a></li>
<li><a href="#change">#CHANGE &lt;kind&gt; <kind></kind></a></li>
<li><a href="#char">#CHAR &lt;number&gt;</a></li>
<li><a href="#flags">#CLEAR &lt;flag variable&gt;</a></li>
<li><a href="#cycle">#CYCLE &lt;number&gt;</a></li>
<li><a href="#die">#DIE</a></li>
<li><a href="#end">#END</a></li>
<li><a href="#endgame">#ENDGAME</a></li>
<li><a href="#give">#GIVE &lt;item&gt; <qty></qty></a></li>
<li><a href="#go">#GO &lt;direction&gt;</a></li>
<li><a href="#idle">#IDLE</a></li>
<li><a href="#if">#IF &lt;flag&gt; [THEN] &lt;msg&gt;</a></li>
<li><a href="#lock">#LOCK</a></li>
<li><a href="#play">#PLAY &lt;sound&gt;</a></li>
<li><a href="#put">#PUT &lt;direction&gt; &lt;kind&gt;</a></li>
<li><a href="#restart">#RESTART</a></li>
<li><a href="#restore">#RESTORE &lt;message&gt;</a></li>
<li><a href="#send">#SEND &lt;message&gt;</a></li>
<li><a href="#flags">#SET &lt;flag variable&gt;</a></li>
<li><a href="#shoot">#SHOOT &lt;direction&gt;</a></li>
<li><a href="#take">#TAKE &lt;item&gt; &lt;qty&gt; [&lt;msg&gt;]</a></li>
<li><a href="#throwstar">#THROWSTAR &lt;direction&gt;</a></li>
<li><a href="#try">#TRY &lt;direction&gt; [&lt;msg&gt;]</a></li>
<li><a href="#unlock">#UNLOCK</a></li>
<li><a href="#walk">#WALK &lt;direction&gt;</a></li>
<li><a href="#zap">#ZAP &lt;message&gt;</a></li>
</ul>

<h4>Descriptions of commands:</h4>

<dl>

<dt><a name="send"></a>#SEND &lt;message&gt;</dt>
<dd>
     Similar to basic's "GOTO"
     command.  <tt>#SEND</tt> followed by
the name of a label within the
program will cause program
execution to continue at that
label.<br>

<blockquote>
<i>Example:</i><br>
 :ABCDEF<br>
 ...program loop goes here...<br>
 #SEND ABCDEF</blockquote>
</dd>

<dt>#SEND &lt;objectname&gt;:&lt;message&gt;</dt>
<dd>
     Causes the execution of a
different program to continue
at a specified label within
that program.  By using this
command, several creatures can
be coordinated.  For example,
the player touches Creature A.
Creature A tells Creature B to
attack the player.<br>
<blockquote>
<i>Example:</i><br>
:TOUCH<br>
#SEND CreatureB:AttackPlayer
</blockquote>

Note:  If the program receiving the message is in
       the locked state, the
       command will be ignored.
       
       See the <tt>#LOCK</tt> command
       for more information.<p>

Note:  If there are two or
       more programs with the
       given name, the message
       will be sent to all of
       them.
</p></dd>

<dt>#SEND ALL:&lt;message&gt;</dt>
<dd>
     Sends a given message to
ALL of the objects on the
board.
</dd>

<dt>#SEND OTHERS:&lt;message&gt;</dt>
<dd>
     Sends a given message to
all objects on the board
except the object itself.

In all <tt>#SEND</tt> commands, the
<tt>SEND</tt> may be omitted, but
messages with the same name
as a command can't be sent
in this way.
</dd>

<dt><a name="end"></a>#END</dt>
<dd>
     Causes program operation
to halt. The object will just
sit idly by until stimulated
by a message.
</dd>

<dt><a name="restart"></a>#RESTART</dt>
<dd>
     Causes the program to go
back to the top and start
over.
</dd>

<dt><a name="go"></a>#GO &lt;direction&gt;</dt>
<dd>
     Causes an object to move
in a specified direction.  The
object will push boulders forward if they are in the way.
If the object can not move in
the given direction, it will
stand by until either it can
move, or it is stimulated by
a message. In other words, it
is equivalent to <tt>/</tt>.<p>

<a href="#dirs">Valid directions</a>
</p></dd>

<dt><a name="try"></a>#TRY &lt;direction&gt; [&lt;msg&gt;]</dt>
<dd>
     Causes the object to move
in the given direction if it
is not blocked. Otherwise, the
given message will be sent.
</dd>

<dt><a name="walk"></a>#WALK &lt;direction&gt;</dt>
<dd>
     Sets the object moving in
the given direction.  The
object will continue moving
and executing commands.
     To cause a program to
cease walking, issue the
"Walk idle" command:
<pre>#WALK I</pre>
When an object <tt>WALK</tt>s
into a wall, it automatically
receives a <tt>THUD</tt> message.
Unfortunately, it will keep
going back to the same
label over and over until
<tt>#ZAP THUD</tt> is used.
</dd>

<dt><a name="idle"></a>#IDLE</dt>
<dd>
     Directs the creature to
do absolutely nothing until it
is updated next.  Same as the
<tt>/I</tt> command.
</dd>

<dt><a name="endgame">#ENDGAME</a></dt><a name="endgame">
<dd>
     This command takes away
all of the player's health,
terminating the game. If the
player has a high score, it
will be recorded.
Interestingly, if you
immediately follow <tt>#endgame</tt>
with <tt>#give health (n)</tt>, the
game will not be terminated,
and the player's health
will be set to <tt>n</tt>.
Program execution
continues past <tt>#endgame</tt>.
In fact, only 3 commands
halt program execution.
<tt>#END</tt>, <tt>#DIE</tt>, and <tt>#BECOME</tt>.
</dd>

</a><dt><a name="endgame"></a><a name="die"></a>#DIE</dt>
<dd>
     The object will instantly
vanish when this command is
issued.  Program execution
halts, and the object is
erased from the screen.  The
game will continue on without
it.  It is equivalent to
<tt>#become empty</tt>.
</dd>

<dt><a name="shoot"></a>#SHOOT &lt;direction&gt;</dt>
<dd>
     Attempts to fire a bullet
in the given direction.<br>
<blockquote>
#SHOOT SEEK   'fires a bullet toward the player
</blockquote>
</dd>

<dt><a name="throwstar"></a>#THROWSTAR &lt;direction&gt;</dt>
<dd>
     Causes the object to
throw a star in the given
direction.  The star will try
to collide with the player.
It is not recommended that you
use stars in excess, as they
are virtually impossible to
avoid.<p>
     Throwstar WOULD be
     equivalent to <tt>#put &lt;direction&gt; star</tt>, but #put will destroy any
fakes or water in its way.
</p></dd>

<dt><a name="zap"></a>#ZAP &lt;message&gt;</dt>
<dd>
     Disables the first occurance of a label by turning
     it into a comment.  For example, <tt>#ZAP TOUCH</tt> would turn the
     label <tt>:TOUCH</tt> into the comment
     <tt>'TOUCH</tt>.  Allows a program to
have several routines with the
same labels, so that the desired label is called at the
appropriate time.  Remember
that the <tt>#SEND</tt> command always
calls the first occurence of a
label.  For example:<br>
<blockquote>
 :TOUCH 'will be called first time creature is touched<br>
 "You touched me for the first time"<br>
 #ZAP TOUCH<br>
 #END<br>
 :TOUCH 'will be called all subsequent times<br>
 "You touched me again."<br>
 #END</blockquote>
</dd>

<dt>#ZAP &lt;objectname&gt;:&lt;message&gt;</dt>
<dd>
Zaps another object's
label.
</dd>

<dt><a name="restore">#RESTORE message</a></dt><a name="restore">
<dd>
Changes a <tt>ZAP</tt>ped label
back into a normal label.
Then, on subsequent calls
to the label, the original
one will be called instead
of a secondary one.
</dd>

<dt>#RESTORE &lt;objectname&gt;:&lt;message&gt;</dt>
<dd>
      Restores another object's
label.<p>
Note: <tt>&lt;objectname&gt;</tt> can
be replaced with <tt>ALL</tt> or
<tt>OTHERS</tt> to <tt>#zap</tt> or <tt>#restore</tt>
labels of all objects or
all other objects, respectively.
</p></dd>

</a><dt><a name="restore"></a><a name="lock"></a>#LOCK</dt>
<dd>
     Puts a program into the
"locked" state, so it will not
be affected by any incomming
messages.  Often, conflicts
occur when two messages are
sent to a program in a short
amount of time.  The second
message interrupts the program
before it can finish handling
the first one.  However, if a
program <tt>LOCK</tt>s itself when
dealing with messages, it can
not be disturbed.
</dd>

<dt><a name="unlock"></a>#UNLOCK</dt>
<dd>
     Removes a program from
the "locked" state, so it is
free to receive incomming
messages.  Any messages that
happened to arrive while it
was <tt>LOCK</tt>ed are lost.<p>
</p><blockquote>
:TOUCH<br>
#LOCK<br>
'code to handle "touch" message goes here...<br>
#UNLOCK<br>
#END<br>
</blockquote>
</dd>

<dt><a name="give"></a>#GIVE &lt;item&gt; &lt;quantity&gt;</dt>
<dd>
     Gives a certain quantity
of an item to the player.
Good for giving bonus points,
selling ammo, awarding extra
health, etc.<br>

Items: AMMO, TORCHES, GEMS, HEALTH, SCORE, TIME<br>
<blockquote>
#GIVE AMMO 10  ' gives the player 10 extra shots<br>
</blockquote>
Note: All items are integers with a
      range between 0 and 32767.
      The torch display can only
      display the left 3 digits, so
      it will appear as 327, but is
      actually 32767.
</dd>

<dt><a name="take"></a>#TAKE &lt;item&gt; &lt;qty&gt; [&lt;message&gt;]</dt>
<dd>
     Attempts to take a certain quantity of an item from
the player.  If the player
does not have the given
amount, none will be taken,
and if a message is given, it
will be sent.<br>
<blockquote>
#TAKE GEMS 2 TooPoor<br>
"Thank you for the gems!"<br>
#END<br>
:TooPoor<br>
"You don't have enough gems!"<br>
#END<br>
</blockquote><p>

     TIME can also be used
     in <tt>#give</tt> and <tt>#take</tt> statements,
as long as the time limit is
turned on in the information menu.
However, <tt>#give</tt> takes the time
closer to 0, even cycling back
to the limit and harming the
player, and <tt>#take</tt> will give the
player more time.  If <tt>#take</tt> would
give the player more time than
the time limit, it does not work
and the message in <tt>#take</tt> is sent.
</p></dd>

<dt><a name="play"></a>#PLAY &lt;music&gt;</dt>
<dd>
     Plays a musical score in
the background as the game
continues.
<dl>
    <dt>Music format</dt>
    <dd>
	 <pre>    _-&gt; [Optional parameters]  [Notes] --_
   /                                      \
   \______________________________________/
     </pre>
    </dd>

    <dt>Parameters</dt>
    <dd>
    <dl>
        <dt>T</dt><dd>32nd note follows</dd>
        <dt>S</dt><dd>Sixteenth</dd>
        <dt>I</dt><dd>Eighth</dd>
        <dt>Q</dt><dd>Quarter</dd>
        <dt>H</dt><dd>Half</dd>
        <dt>W</dt><dd>Whole</dd>
        <dt>3</dt><dd>Triplets: cut previous duration into thirds. For example, "Q3ABC" would play the notes
          A, B, and C, with
          all three taking
          up the time of a
          quarter note.</dd>
        <dt>.</dt><dd>Adds time-and-a-half.
          For example,
          "H." would turn a
          half-note into a
          half-note tied to a
          quarter note.</dd>
        <dt>+</dt><dd>Up octave</dd>
        <dt>-</dt><dd>Down octave</dd>
    </dl>
     </dd>
 
     <dt>Notes &amp; rests</dt>
     <dd>
     <dl>
         <dt>X</dt><dd>Rest</dd>
         <dt>A-G</dt><dd>Piano notes, can be followed by:
         <dl>
             <dt>#</dt><dd>Sharp</dd>
             <dt>!</dt><dd>Flat</dd>
         </dl>
         </dd>
     </dl>
     </dd>

    <dt>Rythmic sound effects</dt>
    <dd>
    <dl>
        <dt>0</dt><dd>Tick</dd>
        <dt>1</dt><dd>Tweet</dd>
        <dt>2</dt><dd>Cowbell</dd>
        <dt>3</dt><dd><em>(no effect, denotes triplet)</em></dd>
        <dt>4</dt><dd>Hi snare</dd>
        <dt>5</dt><dd>High woodblock</dd>
        <dt>6</dt><dd>Low snare</dd>
        <dt>7</dt><dd>Low tom</dd>
        <dt>8</dt><dd>Low woodblock</dd>
        <dt>9</dt><dd>Bass drum</dd>
    </dl>
     </dd>

     <dt>Other notations</dt>
     <dd>
     <dl>
         <dt>[]</dt><dd>Open and close brackets
          let you separate music
          code into parts. They
          are much like comments.</dd>
      </dl>
      </dd>
 </dl>

</dd>

<dt><a name="change"></a>#CHANGE &lt;kind&gt; &lt;kind&gt;</dt>
<dd>
     Changes every specified
item on the board into another
item.  <tt>&lt;kind&gt;</tt> is the name of
an item, creature, or terrain
as listed in the editor (by
pressing <tt>F1</tt>, <tt>F2</tt>, <tt>F3</tt>, <tt>F4</tt> or <tt>F5</tt>),
but with all punctuation and
spaces removed.  <tt>LINE</tt>, <tt>BULLET</tt>,
<tt>EMPTY</tt> and <tt>STAR</tt> are also valid
values for <tt>&lt;kind&gt;</tt>.
<blockquote>
#CHANGE LION GEM<br>
    'Turns all lions on the board into gems.<br>
#CHANGE KEY SLIDEREW<br>
    'Changes all keys into east-west sliders.<br>
#CHANGE RED KEY CLOCKWISE<br>
    'Changes all red keys into clockwise conveyors.</blockquote>
<a href="https://apocalyptech.com/games/zzt/manual/names.html">Names of Objects</a>
</dd>

<dt><a name="put"></a>#PUT &lt;direction&gt; &lt;kind&gt;</dt>
<dd>
     This causes a specified
item to be placed adjacent to
the object issuing the command.
<blockquote>
#PUT N BLUE KEY<br>
    'Places a blue key north of us.<br>
#PUT SEEK TIGER<br>
    'Puts a tiger in the direction of the player.</blockquote>

<a href="https://apocalyptech.com/games/zzt/manual/names.html">Names of Objects</a>
</dd>

<dt><a name="become"></a>#BECOME &lt;kind&gt;</dt>
<dd>
     Causes the object to
suddenly change form into a
specified item or creature.
The object's program then
ceases to exist.<p>

<a href="https://apocalyptech.com/games/zzt/manual/names.html">Names of Objects</a>
</p></dd>

<dt><a name="char"></a>#CHAR &lt;number&gt;</dt>
<dd>
     Causes the object to
change form, so that it is
represented on the screen as a
different character.  <tt>&lt;Number&gt;</tt>
can range from 0 to 255, and
should be the ASCII code of
the new character.<p>

<a href="https://apocalyptech.com/games/zzt/manual/ascii.html">ASCII Character Codes</a>
</p></dd>

<dt><a name="cycle"></a>#CYCLE &lt;number&gt;</dt>
<dd>
     Sets the speed at which
an object is updated.  This
can range from 1 (fastest) to
255 (ridiculusly slow).  When
no CYCLE speed is specified,
it defaults to 3.
</dd>

<dt><a name="bind"></a>#BIND &lt;objectname&gt;</dt>
<dd>
     When a Program executes
this instruction, its code
will be replaced by the code
of another object, and it will
start executing instructions
from the beginning.<p>

    This is a useful and
space-saving technique.
Rather than creating ten
objects with the same program
(which would be stored in
memory ten times), create one
object with the program, and
nine others that contain only
a BIND statement.
</p></dd>

</dl>




</body></html>